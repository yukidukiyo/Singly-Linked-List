;単方向リスト
;singly linked list
#ifndef SinglyLinkedList

#define SinglyLinkedList
#define global sladd(%1,%2=0,%3) p3=%3:\
if vartype(p3)=2{_sladd2 %1,%2,p3}\
else:if vartype(p3)=3{_sladd3 %1,%2,p3}\
else:if vartype(p3)=4{_sladd4 %1,%2,p3}\
else{dialog"呼び出し先の関数が存在しません"}
#define global ctype slget(%1,%2,%3=0) _slget(%1,%2,%3)
#define global slupd(%1,%2,%3,%4) p4=%4:\
if vartype(p4)=2{_slupd2 %1,%2,%3,p4}\
else:if vartype(p4)=3{_slupd3 %1,%2,%3,p4}\
else:if vartype(p4)=4{_slupd4 %1,%2,%3,p4}\
else{dialog"呼び出し先の関数が存在しません"}
#define global slins(%1,%2,%3,%4) p4=%4:\
if vartype(p4)=2{_slins2 %1,%2,%3,p4}\
else:if vartype(p4)=3{_slins3 %1,%2,%3,p4}\
else:if vartype(p4)=4{_slins4 %1,%2,%3,p4}\
else{dialog"呼び出し先の関数が存在しません"}
#define global sldel(%1,%2,%3=0) _sldel %1,%2,%3
#define global ctype sllength(%1,%2=0) _sllength(%1,%2)

#module
#const null -1
#const vt_s 2
#const vt_d 3
#const vt_i 4
#enum a_headstid=0
#enum a_headedid
#enum a_len
#enum a_nextct
#enum a_nextheadid
#enum a_max
#enum h_vartype=0
#enum h_varid
#enum h_nextheadid
#enum h_max
#deffunc slinit
	dim headlist,h_max,1
	dim headstack
	headstackid=0
	ddim dbllist
	dim dblstack
	dblstackid=0
	sdim strlist
	dim strstack
	strstackid=0
	return
;宣言
#deffunc sllist array mr_arr,int m_num
	if m_num<=0{
		t_num=1
	}else{
		t_num=m_num
	}
	dim mr_arr,a_max,t_num
	return
;追加
#deffunc _sladd2 array mr_arr,int m_id,str m_setval
	sladdcommon mr_arr,m_id
	headlist(h_nextheadid,curid)=null
	setstrlist m_setval
	return
#deffunc _sladd3 array mr_arr,int m_id,double m_setval
	sladdcommon mr_arr,m_id
	headlist(h_nextheadid,curid)=null
	setdbllist m_setval
	return
#deffunc _sladd4 array mr_arr,int m_id,int m_setval
	sladdcommon mr_arr,m_id
	headlist(h_nextheadid,curid)=null
	setintlist m_setval
	return
#deffunc sladdcommon array mr_arr,int m_id
	if length(mr_arr)<a_max{
		sllist mr_arr
	}
	if length2(mr_arr)<=m_id{
		mr_arr(a_headstid,m_id)=null
		mr_arr(a_len,m_id)=0
	}
	getheadstackid
	if mr_arr(a_len,m_id)<=0{
		mr_arr(a_headstid,m_id)=curid
		mr_arr(a_len,m_id)=0
		mr_arr(a_nextct,m_id)=0
		mr_arr(a_nextheadid,m_id)=curid
	}else{
		headlist(h_nextheadid,mr_arr(a_headedid,m_id))=curid
	}
	mr_arr(a_headedid,m_id)=curid
	mr_arr(a_len,m_id)++
	return
;取得
#defcfunc _slget array mr_arr,int m_memid,int m_id
	if mr_arr(a_len,m_id)<=m_memid{
		dialog"指定したリストの要素数が最大値を超えています。",1
		end
	}
	getcurid mr_arr,m_memid,m_id
	if mr_arr(a_len,m_id)<=m_memid+1{
		mr_arr(a_nextct,m_id)=0
		mr_arr(a_nextheadid,m_id)=mr_arr(a_headstid,m_id)
	}else{
		mr_arr(a_nextct,m_id)=m_memid+1
		mr_arr(a_nextheadid,m_id)=headlist(h_nextheadid,curid)
	}
	if headlist(h_vartype,curid)=vt_s{
		return strlist(headlist(h_varid,curid))
	}else:if headlist(h_vartype,curid)=vt_d{
		return dbllist(headlist(h_varid,curid))
	}else{
		return headlist(h_varid,curid)
	}
;更新
#deffunc _slupd2 array mr_arr,int m_memid,int m_id,str m_setval
	getcurid mr_arr,m_memid,m_id
	if headlist(h_vartype,curid)=vt_s{
		strlist(headlist(h_varid,curid))=m_setval
	}else:if headlist(h_vartype,curid)=vt_d{
		dblstackid++
		dblstack(dblstackid)=headlist(h_varid,curid)
		setstrlist m_setval
	}else{
		setstrlist m_setval
	}
	return
#deffunc _slupd3 array mr_arr,int m_memid,int m_id,double m_setval
	getcurid mr_arr,m_memid,m_id
	if headlist(h_vartype,curid)=vt_s{
		strstackid++
		strstack(strstackid)=headlist(h_varid,curid)
		setdbllist m_setval
	}else:if headlist(h_vartype,curid)=vt_d{
		dbllist(headlist(h_varid,curid))=m_setval
	}else{
		setdbllist m_setval
	}
	return
#deffunc _slupd4 array mr_arr,int m_memid,int m_id,int m_setval
	getcurid mr_arr,m_memid,m_id
	if headlist(h_vartype,curid)=vt_s{
		strstackid++
		strstack(strstackid)=headlist(h_varid,curid)
		setintlist m_setval
	}else:if headlist(h_vartype,curid)=vt_d{
		dblstackid++
		dblstack(dblstackid)=headlist(h_varid,curid)
		setintlist m_setval
	}else{
		headlist(h_varid,curid)=m_setval
	}
	return
;挿入
#deffunc _slins2 array mr_arr,int m_memid,int m_id,str m_setval
	getbefcurid mr_arr,m_memid,m_id
	headlist(h_nextheadid,headstack(headstackid))=curid
	getheadstackid
	setstrlist m_setval
	slinscommon mr_arr,m_memid,m_id
	return
#deffunc _slins3 array mr_arr,int m_memid,int m_id,double m_setval
	getbefcurid mr_arr,m_memid,m_id
	headlist(h_nextheadid,headstack(headstackid))=curid
	getheadstackid
	setdbllist m_setval
	slinscommon mr_arr,m_memid,m_id
	return
#deffunc _slins4 array mr_arr,int m_memid,int m_id,int m_setval
	getbefcurid mr_arr,m_memid,m_id
	headlist(h_nextheadid,headstack(headstackid))=curid
	getheadstackid
	setintlist m_setval
	slinscommon mr_arr,m_memid,m_id
	return
;削除
#deffunc _sldel array mr_arr,int m_memid,int m_id
	if mr_arr(a_len,m_id)<=m_memid{
		dialog"指定したリストの要素数が最大値を超えています。",1
		end
	}
	getbefcurid mr_arr,m_memid,m_id
	if m_memid=0{
		mr_arr(a_headstid,m_id)=headlist(h_nextheadid,curid)
	}else:if m_memid=mr_arr(a_len,m_id)-1{
		headlist(h_nextheadid,befid)=headlist(h_nextheadid,curid)
		mr_arr(a_headedid,m_id)=befid
	}else{
		headlist(h_nextheadid,befid)=headlist(h_nextheadid,curid)
	}
	mr_arr(a_len,m_id)--
	mr_arr(a_nextct,m_id)=limit(m_memid,0,mr_arr(a_len,m_id)-1)
	mr_arr(a_nextheadid,m_id)=headlist(h_nextheadid,curid)
	headstackid++
	headstack(headstackid)=curid
	if headlist(h_vartype,curid)=vt_s{
		strstackid++
		strstack(strstackid)=headlist(h_varid,curid)
	}else:if headlist(h_vartype,curid)=vt_d{
		dblstackid++
		dblstack(dblstackid)=headlist(h_varid,curid)
	}
	return
;長さ
#defcfunc _sllength array mr_arr,int m_id
	return mr_arr(a_len,m_id)
;内部関数
#deffunc slinscommon array mr_arr,int m_memid,int m_id
	mr_arr(a_nextct,m_id)=m_memid
	mr_arr(a_nextheadid,m_id)=curid
	if m_memid=0{
		mr_arr(a_headstid,m_id)=curid
	}else{
		headlist(h_nextheadid,befid)=curid
	}
	return
#deffunc getheadstackid
	curid=headstack(headstackid)
	if headstackid>0{
		headstackid--
	}else{
		headstack(headstackid)++
	}
	return
#deffunc getcurid array mr_arr,int m_memid,int m_id
	if mr_arr(a_nextct,m_id)=m_memid{
		curid=mr_arr(a_nextheadid,m_id)
	}else{
		curid=mr_arr(a_headstid,m_id)
		repeat m_memid
			curid=headlist(h_nextheadid,curid)
		loop
	}
	return
#deffunc getbefcurid array mr_arr,int m_memid,int m_id
	befid=null
	if mr_arr(a_nextct,m_id)=m_memid{
		curid=mr_arr(a_nextheadid,m_id)
	}else{
		curid=mr_arr(a_headstid,m_id)
		repeat m_memid
			befid=curid
			curid=headlist(h_nextheadid,curid)
		loop
	}
	return
#deffunc setstrlist str m_setval
	headlist(h_vartype,curid)=vt_s
	headlist(h_varid,curid)=strstack(strstackid)
	strlist(strstack(strstackid))=m_setval
	if strstackid>0{
		strstackid--
	}else{
		strstack(strstackid)++
	}
	return
#deffunc setdbllist double m_setval
	headlist(h_vartype,curid)=vt_d
	headlist(h_varid,curid)=dblstack(dblstackid)
	dbllist(dblstack(dblstackid))=m_setval
	if dblstackid>0{
		dblstackid--
	}else{
		dblstack(dblstackid)++
	}
	return
#deffunc setintlist int m_setval
	headlist(h_vartype,curid)=vt_i
	headlist(h_varid,curid)=m_setval
	return
#global

slinit

#endif
